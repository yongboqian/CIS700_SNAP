#!/usr/bin/env python
PACKAGE = "snap_low_level_detectors"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("scale_factor",  double_t, 0, "Parameter specifying how much the image size is reduced at each image scale",    1.1, 1.01,   5.0)
gen.add("min_neighbors", int_t,    0, "Parameter specifying how many neighbors each candidate rectangle should have to retain it.", 3,  0, 100)
gen.add("min_width",     int_t,    0, "Minimum possible object width. Objects smaller than that are ignored.", 0,  0, 1000)
gen.add("min_height",    int_t,    0, "Minimum possible object height. Objects smaller than that are ignored.", 0,  0, 1000)
gen.add("max_width",     int_t,    0, "Maximum possible object width. Objects larger than that are ignored.", 0,  0, 1000)
gen.add("max_height",    int_t,    0, "Maximum possible object height. Objects larger than that are ignored.", 0,  0, 1000)

flags_enum = gen.enum([ gen.const("CV_HAAR_NO_PRUNING",           int_t, 0, "No pruning before cascade detection. Not supported anyway for new-style cascades."),
                        gen.const("CV_HAAR_DO_CANNY_PRUNING",     int_t, 1, "Uses Canny edge detector to reject some image regions that contain too few or too much edges and thus can not contain the searched object. The particular threshold values are tuned for face detection and in this case the pruning speeds up the processing")],
                      "Mode of operation")

gen.add("flags", int_t, 0, "Parameter with the same meaning for an old cascade as in the function cvHaarDetectObjects. It is not used for a new cascade.", 0, 0, 1, edit_method=flags_enum)

exit(gen.generate(PACKAGE, "snap_low_level_detectors", "OCVCascadeDetector"))
