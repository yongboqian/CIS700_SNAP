<?xml version="1.0"?>
<!-- 
  Example launch file for octomap_server mapping using nodelets: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
  <!--node pkg="nodelet" type="nodelet" name="octomap_server_nodelet" args="load octomap_server/OctomapServerNodelet camera/camera_nodelet_manager"-->
  <node pkg="nodelet" type="nodelet" name="octomap_server_nodelet" args="standalone octomap_server/OctomapServerNodelet">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="9.0" />
		
		<!-- filter out the ground -->
		<param name="filter_ground" value="True" />
		<param name="ground_filter/distance" value="0.04"/> <!-- Distance threshold for points (in z direction) to be segmented to the ground plane -->
		<param name="ground_filter/angle" value="0.524"/> <!-- 30 degrees -->
		<param name="ground_filter/angle" value="0.07"/> <!-- Distance threshold from z=0 for a plane to be detected as ground (4th coefficient of the plane equation from PCL) -->
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="camera/depth_registered/points" />

		<!-- don't latch since we are building the map -->
		<param name="latch" value="False" />
	 
	  <!-- output collision map -->
	  <remap from="octomap_server_nodelet/collision_map_out" to="collision_map_out"/>
	
	</node>
</launch>
